generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("POSTGRES_URL")
}

enum UserRole {
  Customer
  Courier
  Shop
}

enum OrderStatus {
  Ordered
  Packaged
  InDelivery
  Received
  Returned
}

enum DeliveryMethod {
  ByCourier
  SelfPickup
}

enum Currency {
  RSD
  USD
  EUR
  CHF
}

enum PaymentMethod {
  OnDelivery
  PayPal
}

enum MeasurementUnit {
  KG
  G
  L
  ML
  PCS
}

enum Workday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model User {
  id               Int           @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String        @unique
  password         String
  addressName      String?
  addressLatitude  Decimal?
  addressLongitude Decimal?
  phoneNumber      String?
  currency         Currency      @default(RSD)
  paymentMethod    PaymentMethod @default(OnDelivery)
  roles            UserRole[]    @default([Customer])
  updatedAt        DateTime      @updatedAt
  createdAt        DateTime      @default(now())

  customer  Customer?
  Courier   Courier[]
  Shop      Shop[]
  UserMedia UserMedia?

  @@map("users")
}

model UserMedia {
  userId       Int      @id
  mimetype     String
  key          String   @unique
  originalName String
  name         String?
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@map("user_medias")
}

model Customer {
  userId       Int      @id
  rating       Decimal  @default(0)
  ratingsCount Int      @default(0)
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Review          Review[]
  Order           Order[]
  FavoriteProduct FavoriteProduct[]
  FavoriteShop    FavoriteShop[]

  @@map("customers")
}

model Courier {
  userId              Int      @id
  routeStartLatitude  Decimal?
  routeStartLongitude Decimal?
  routeEndLatitude    Decimal?
  routeEndLongitude   Decimal?
  rating              Decimal  @default(0)
  ratingsCount        Int      @default(0)
  updatedAt           DateTime @updatedAt
  createdAt           DateTime @default(now())

  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order Order[]

  @@map("couriers")
}

model Shop {
  userId                      Int       @id
  name                        String?
  openFromHours               String[]
  openTillHours               String[]
  workdays                    Workday[]
  availableAtAddressName      String?
  availableAtAddressLatitude  Decimal?
  availableAtAddressLongitude Decimal?
  updatedAt                   DateTime  @updatedAt
  createdAt                   DateTime  @default(now())

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Product      Product[]
  ReviewReply  ReviewReply[]
  FavoriteShop FavoriteShop[]

  @@map("shops")
}

model Product {
  id                          Int             @id @default(autoincrement())
  shopUserId                  Int
  categoryId                  Int
  title                       String
  desc                        String?
  price                       Decimal
  currency                    Currency        @default(RSD)
  measurementUnit             MeasurementUnit
  isAvailable                 Boolean         @default(true)
  rating                      Decimal         @default(0)
  ratingsCount                Int             @default(0)
  availableAtAddressName      String?
  availableAtAddressLatitude  Decimal?
  availableAtAddressLongitude Decimal?
  availableFromHours          String[]
  availableTillHours          String[]
  availableOnWorkdays         Workday[]
  updatedAt                   DateTime        @updatedAt
  createdAt                   DateTime        @default(now())

  shop            Shop              @relation(fields: [shopUserId], references: [userId], onDelete: Cascade)
  Category        Category          @relation(fields: [categoryId], references: [id])
  ProductMedia    ProductMedia[]
  Review          Review[]
  Order           Order[]
  FavoriteProduct FavoriteProduct[]

  @@map("products")
}

model FavoriteProduct {
  customerUserId Int
  productId      Int
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  customer Customer @relation(fields: [customerUserId], references: [userId], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([customerUserId, productId])
  @@map("favorite_products")
}

model FavoriteShop {
  customerUserId Int
  shopUserId     Int
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  customer Customer @relation(fields: [customerUserId], references: [userId], onDelete: Cascade)
  shop     Shop     @relation(fields: [shopUserId], references: [userId], onDelete: Cascade)

  @@unique([customerUserId, shopUserId])
  @@map("favorite_shops")
}

model ProductMedia {
  productId    Int      @id
  mimetype     String
  key          String   @unique
  originalName String
  name         String?
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, key])
  @@map("product_medias")
}

model Order {
  id             Int            @id @default(autoincrement())
  productId      Int
  customerUserId Int
  courierUserId  Int?
  quantity       Int
  isAccepted     Boolean        @default(false)
  orderStatus    OrderStatus    @default(Ordered)
  deliveryMethod DeliveryMethod @default(ByCourier)
  paymentMethod  PaymentMethod  @default(PayPal)
  updatedAt      DateTime       @updatedAt
  createdAt      DateTime       @default(now())

  customer        Customer         @relation(fields: [customerUserId], references: [userId], onDelete: Cascade)
  courier         Courier?         @relation(fields: [courierUserId], references: [userId], onDelete: SetNull)
  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  scheduledPickup ScheduledPickup?

  @@map("orders")
}

model ScheduledPickup {
  orderId    Int      @id
  dateTime   DateTime
  isAccepted Boolean? @default(false)
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("scheduled_pickups")
}

model Category {
  id               Int      @id @default(autoincrement())
  parentCategoryId Int?
  name             String   @unique
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())

  subCategories  Category[] @relation(name: "category_has_subcategory")
  parentCategory Category?  @relation(name: "category_has_subcategory", fields: [parentCategoryId], references: [id])
  products       Product[]

  @@map("categories")
}

model Review {
  id             Int      @id @default(autoincrement())
  productId      Int
  customerUserId Int?
  text           String
  rating         Int
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer      Customer?     @relation(fields: [customerUserId], references: [userId], onDelete: SetNull)
  reviewReplies ReviewReply[]

  @@unique([productId, customerUserId])
  @@map("reviews")
}

model ReviewReply {
  reviewId   Int      @id
  shopUserId Int
  text       String
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  shop   Shop   @relation(fields: [shopUserId], references: [userId])

  @@unique([reviewId, shopUserId])
  @@map("review_replies")
}
